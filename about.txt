- git status : gives you informations about your working directory.

- working directory : is the project folder with all the project files in it.

- to manage our project by git we need in our working directory  : (.git =>hidden folder) repository that contains  the staging Area(Index file) and Commits(objects folder).

- git init :initialise our git repository.

- git status :  shows  that we are in master branch.

- master branch contains all our commits.

- git add file_name : add untracked file showed by git status to our staging area.

- git add . : add all untracked files to the staging area

- git commit -m  : each commit has a specific message.
- account identity : 
	*git config -- global user.email "my-email"
	*git config --global user.name "sbarkadev"

- git log :command that gives us access to all our commits in our current branch.
	- commit id 
	- when the commit was created 
	- the commit message

- for each commit we create we have a unique id : this id make it easy to specifically load or check out the commit with that id .

- git log : latest commit always in top 

- the cool thing about version management : if we want to go back to our previous commit , we get the id of the commit from git log ; to load a specific commit : git checkout (commit_id)


- git checkout commit_id
- git log
- git checkout master  : go back to our commits after a checkout 

- a branch is a unique set of specifique code changes.

- the branch holds  commits

- master branch is the default name of the first branch you create in git project

- if you want to start side project or add additionnal content to your project you might want to create a complete copy of your existing branch , work on that copy and then later implement changes you added to the copy to the original master branch.
	- create a copy of master branch 
	- add some additional folders ,files , commits
	- add this changes to the master branch 


- git branch : get an overview of all the branches you have in your current project

- git branch branch_name_without spaces : create a new branch

- git checkout second-branch : to access the second branch : we use the checkout command, we can use it also with commits , but actually checkout is made to switch between branches .

- currently we are in second branch : 
	-git log : see the same structure that we have in master branch , same ids of commit ...

- git checkout -b third branch : creating a branch and checking it out  using one command 

-if we work in a seperate feature in a seperate branch and you finish the feature , you can merge branches.

switch to master branch :
	-git merge third-branch : add our third commit to our master branch

- git branch

- what is the "HEAD" that we saw in different commits in our log = > commit 0c32263f223a9d842c79b433eef8faf428c00d04 (HEAD -> master, origin/third-branch, origin/master, third-branch) 
	- understand the structure :
		we have :
			master branch => commit1 commit2 commit3 commit4 ...
			whenever we use the checkout command the way attended to be (because also we can checkout commits)
			; checking out branches . so if we checkout the master branch , the last commit will be the HEAD
			- by checking out the branch we are reffering to a specific branch  indirectly points to the latest commit in this branch
			=> it's the default behavior that we have in git 
			- checking out branch means referring to a specific branch , and in this branch we basically indirectly reffer to the latest command 
			=>that's how git behaves in the end .

- git branch

- git checkout second-branch

- the detached HEAD


- we can't only check out specific branches , but we can also check out specific commits 
	each commit in git is identified by unique id

- checking out a branch means we check out the specific branch , refer to our branch and inderictly refer to our latest commit.
- checking out a commit(that is ib both branches) , reffer to our commit  (not related to a specific branch).

master:			commit1 				commit2			commit3
											.
											. Detached HEAD
											.
other:			commit1					commit2			commit3		commit4


- git checkout id-commit
	Warning: you are leaving 1 commit behind, not connected to
	any of your branches:
		aee9f9b detached HEAD state


---------------------------------------------------------

- git switch : -allows you to do : switch branches and create new branches 
			  - switch  command used for working with branches
- git checkout : can be used for commits and branches , so it can be a bit confusing (so we use git switch)

- git switch third-branch : switch to our third branch

- git switch -c fourth-branch  : create our fourth-branch


--------------------------------------------------------

- you want to delete working-with branches.txt file

- git ls-files : to check which files are part of our staging area 

- with git add you tell git which files should be tracked , or which changes should be tracked

	- remove working-with-branches.txt files from our working directory 
	- the file is not removing from our staging area (git status)
	- git add working-with-branches.txt / git rm working-with-branches.txt .
	- git ls-files : the file is not longer a part of staging area
	- git commit -m "deleted working-with-branches file"