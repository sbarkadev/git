- git status : gives you informations about your working directory.

- working directory : is the project folder with all the project files in it.

- to manage our project by git we need in our working directory  : (.git =>hidden folder) repository that contains  the staging Area(Index file) and Commits(objects folder).

- git init :initialise our git repository.

- git status :  shows  that we are in master branch.

- master branch contains all our commits.

- git add file_name : add untracked file showed by git status to our staging area.

- git add . : add all untracked files to the staging area

- git commit -m  : each commit has a specific message.
- account identity : 
	*git config -- global user.email "my-email"
	*git config --global user.name "sbarkadev"

- git log :command that gives us access to all our commits in our current branch.
	- commit id 
	- when the commit was created 
	- the commit message

- for each commit we create we have a unique id : this id make it easy to specifically load or check out the commit with that id .

- git log : latest commit always in top 

- the cool thing about version management : if we want to go back to our previous commit , we get the id of the commit from git log ; to load a specific commit : git checkout (commit_id)


- git checkout commit_id
- git log
- git checkout master  : go back to our commits after a checkout 

- a branch is a unique set of specifique code changes.

- the branch holds  commits

- master branch is the default name of the first branch you create in git project

- if you want to start side project or add additionnal content to your project you might want to create a complete copy of your existing branch , work on that copy and then later implement changes you added to the copy to the original master branch.
	- create a copy of master branch 
	- add some additional folders ,files , commits
	- add this changes to the master branch 


- git branch : get an overview of all the branches you have in your current project

- git branch branch_name_without spaces : create a new branch

- git checkout second-branch : to access the second branch : we use the checkout command, we can use it also with commits , but actually checkout is made to switch between branches .

- currently we are in second branch : 
	-git log : see the same structure that we have in master branch , same ids of commit ...

- git checkout -b third branch : creating a branch and checking it out  using one command 

-if we work in a seperate feature in a seperate branch and you finish the feature , you can merge branches.

switch to master branch :
	-git merge third-branch : add our third commit to our master branch

- git branch